#pragma once
/* #include <napi.h> */
// #include "node_modules/node-addon-api/napi.h"
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <string>
#include <vector>
#include <iomanip>
#include <time.h>
#include <functional>
#include <exception>
#include <tuple>
#include "../ProductionForecast/Forecast.h"
#include "../../nlohmann/json.hpp"
//#include "../ProductionForecast/Inputdeck.h"
//Inputdeck inputdeck2;

using namespace std;
using json = nlohmann::json;


void from_json(const json& j, Priotization& deck) {
    j.at("productionEquipment").get_to(deck.FacilityName);
    j.at("typeOfPrioritization").get_to(deck.typeOfPrioritization);
    j.at("methodOfPrioritization").get_to(deck.methodOfPrioritization);
    j.at("targetFluid").get_to(deck.targetFluid);
    j.at("nParameterNamesWeights").get_to(deck.nParameterNamesWeights);
    for (const auto& connection : j.at("equipmentConnections")) {
        map<string, string> nodeMap;
        vector<string> row;
        for (auto it = connection.begin(); it != connection.end(); ++it) {
            row.push_back(it.value());
        }
        payload.equipmentConnections.push_back(row);
    }

    inputdeck2.ToLower(deck.equipmentType);


		priotization.targetFluid = (wrappedTypeOfPrioritization.Get(Napi::String::New(env, ""))).As<Napi::String>();
		Napi::Array parameterNamesWeights = (wrappedTypeOfPrioritization.Get(Napi::String::New(env, "parameterNamesWeights"))).As<Napi::Array>();
		Napi::Number nParameterNamesWeights = (wrappedTypeOfPrioritization.Get(Napi::String::New(env, ""))).As<Napi::Number>();
		int count = (int)nParameterNamesWeights;
		int  i = 0;
		for(i = 0; i < count; i++){
			Napi::Object parameterNamesWeightsObject = ((Napi::Value)parameterNamesWeights[i]).As<Napi::Object>();
			string parameterName = (parameterNamesWeightsObject.Get(Napi::String::New(env, "parameterName"))).As<Napi::String>();
			double parameterWeight = (parameterNamesWeightsObject.Get(Napi::String::New(env, "parameterWeight"))).As<Napi::Number>();
			priotization.prioritizationModel.ParameterNames.push_back(parameterName);
			priotization.prioritizationModel.ParameterWeights.push_back(parameterWeight);
		}
}